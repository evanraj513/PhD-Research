#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Jan 28 16:32:58 2020

@author: evanraj
"""

import os
import sys

import numpy as np
from mpl_toolkits import mplot3d
import matplotlib.pyplot as plt
from matplotlib import cm
plt.rcParams['backend'] = "Qt4Agg"

l_path = '..'
m_path = os.path.abspath(l_path)
if not os.path.exists(m_path):
    print('Error importing modules. Need to specify new path')
    raise Exception
else:
    sys.path.append(m_path)

#import scipy as sp
#from scipy.sparse import csr_matrix

from Research import ferro_system1
Ferro_sys = ferro_system1.Ferro_sys

from Research import field_class

####################################

######## Setting up 3D system ######

####################################

#### Parameters (global)
#mu0 = 1.25667e-6
#eps = 0.88422e-11
#gamma = 2.2e5
#K = 0
#alpha = 0.2
#H_s_val = 10**5
#
#### Parameters (system)
#max_x = 16.4
#disc = [0.4, 0.4, 0.4]
#
#dt = 5e-10
#T = 6e-8
#
#
#if (max_x/disc[0])%2 == 0:
#    print('Warning. Grid could fail, untested')
#    size = round(max_x/disc[0])
#    
#elif (max_x/disc[0])%2 == 1:
#    size = round(max_x/disc[0])
#    
#else:
#    print('That domain and disc not available'
#          '\n','Attempting closest available disc.')
#    max_x = max_x - (max_x/disc[0])%2
#    size = round(max_x/disc[0])
#    
#def sizing(nx):
#    size_Ex = np.array([(nx-1)/2, (nx+1)/2, (nx+1)/2])
#    size_Ey = np.array([(nx+1)/2, (nx-1)/2, (nx+1)/2])
#    size_Ez = np.array([(nx+1)/2, (nx+1)/2, (nx-1)/2])
#
##    size_Bx = np.array([(nx-3)/2, (nx-1)/2, (nx-1)/2])
##    size_By = np.array([(nx-1)/2, (nx-3)/2, (nx-1)/2])
##    size_Bz = np.array([(nx-1)/2, (nx-1)/2, (nx-3)/2])
#    
#    size_Bx = np.array([(nx+1)/2, (nx-1)/2, (nx-1)/2])
#    size_By = np.array([(nx-1)/2, (nx+1)/2, (nx-1)/2])
#    size_Bz = np.array([(nx-1)/2, (nx-1)/2, (nx+1)/2])
#    return [size_Ex, size_Ey, size_Ez, size_Bx, size_By, size_Bz]
#
#
#
#a = np.round(np.array(sizing(size)).prod(axis=1))
#
#### Initial conditions
#E0_x = np.zeros(shape = (int(a[0]),1))
#E0_y = np.zeros(shape = (int(a[1]),1))
#E0_z = np.zeros(shape = (int(a[2]),1))
#E0 = np.concatenate((E0_x, E0_y, E0_z),axis=1).T
#
#B0_x = np.zeros(shape = (int(a[3]),1))
#B0_y = np.zeros(shape = (int(a[4]),1))
#B0_z = np.zeros(shape = (int(a[5]),1))
#B0 = np.concatenate((B0_x, B0_y, B0_z),axis=1).T
#
#M0_x = np.zeros(shape = (int(a[3]),1))
#M0_y = np.zeros(shape = (int(a[4]),1))
#M0_z = 100*np.ones(shape = (int(a[5]),1)) 
#M0 = np.concatenate((M0_x, M0_y, M0_z),axis=1).T
#
#H0_x = np.zeros(shape = (int(a[3]),1))
#H0_y = np.zeros(shape = (int(a[4]),1))
#H0_z = np.zeros(shape = (int(a[5]),1))
#H0 = np.concatenate((H0_x, H0_y, H0_z),axis=1).T
#
#H_s_x = H_s_val*np.ones(shape = (int(a[3]),1))
#H_s_y = H_s_val*np.ones(shape = (int(a[4]),1))
#H_s_z = H_s_val*np.ones(shape = (int(a[5]),1))
#H_s = np.concatenate((H_s_x, H_s_y, H_s_z),axis=1).T
#
#R_sys = Ferro_sys(size,disc,E0,H0,M0,H_s)
#R_sys.dt = dt
#
#t = dt
#    
#E_old = R_sys.E_old
#H_old = R_sys.H_old
#M_old = R_sys.M_old
#B_old = R_sys.B_old
#
#dt = R_sys.dt
#b_ind = R_sys.bound_ind
#bdp = R_sys.better_dot_pdt
#
#beta0 = 4E4
#f = 4E7
#a = 1.34
#k = (np.pi/a)**2
#c = 3E8

####################################

#### Debugging Ricker pulse case:

####################################
#
#def g(x):
#    '''
#    Actual Ricker pulse function
#    '''
#    if x < 2*a:
#        pa = 2*k/11*(2*k*(x-a)**2-1)
#        pb = (np.e**(-k*(x-a)**2))
#        
#        return pa*pb
#    else:
#        return 0

### For plotting the Ricker Pulse
#dx = 0.01
#max_x = 16
#dt = 5e-10
#T = 6e-8
#
#
#x_vals = np.arange(0,max_x+dx,dx)
#t_vals = np.arange(0,T+dt,dt)
#g_vals = np.zeros(x_vals.shape)
#f = 4E7
#a = 1.35
#k = (np.pi/a)**2
#c = 3E8
#beta0 = 4e4 #This is E0 in Puttha's PhD, but beta0 in my notes
#
#fig = plt.figure()
#ax = fig.add_subplot(111)
#for t in t_vals:
#    for k in np.arange(0,x_vals.shape[0]):
#        g_vals[k] = beta0*g(f*(t - x_vals[k]/c))
#    if round(t,9) == round(T-dt,9): ### Change this to see different times
#        ax.plot(x_vals, g_vals)
#        ax.add_title('time: ',t)
#        plt.show()
#        wait = input('press Enter to continue')
#    else:
#        pass
#    
#### Ricker Pulse forcing conditions at z = 0 
#### 'Normal' boundary conditions elsewhere
#
#def f_x(x,y,z,t):
#    '''
#    Ricker Pulse for x
#    '''
#    if z < 1E-12: #approx 0
#        d = beta0*g(f*t)
#        return d
#    else:
#        return 0
#    
#    
#    
#def f_y(x,y,z,t):
#    '''
#    Ricker Pulse for y
#    '''
#    return 0
#    
#    
#def f_z(x,y,z,t):
#    '''
#    Ricker Pulse for z
#    '''
#    return 0
#
#R_sys.fx = f_x
#R_sys.fy = f_y
#R_sys.fz = f_z


####################################

## No debugging specified, but a single-run is 
## saved below for easy debuggin 

####################################

## Actual computation of time stepping
#R_sys.set_up()

#F = np.concatenate((R_sys.Fx(t), R_sys.Fy(t), R_sys.Fz(t)),axis=1)
#E_new_values = E_old.values + dt*H_old.curl()
#
##Setting all E boundaries to 0
#for j in b_ind[0]:
#    E_new_values[0][j] = 0 #x_bound(j)
#for k in b_ind[1]:
#    E_new_values[1][k] = 0
#for l in b_ind[2]:
#    E_new_values[2][l] = 0
#
#### Forcing term and boundary conditions inside F
#E_new_values = E_new_values+F.T
#R_sys.E_new = E_new_values
#
#B_new_values = B_old.values - dt*R_sys.E_new.curl()
#R_sys.B_new = B_new_values
#
#B_on = (B_old.values + B_new_values)/2
#
#f = 2*M_old.values
#a = -(abs(gamma)*dt/2)*(B_on/mu0 + R_sys.H_s.values) - alpha*M_old.values
#lam = -K*abs(gamma)*R_sys.dt/4
#
#a_dot_f =  bdp(a.T,f.T).T
#
#p_x = np.zeros(shape = (M_old.values.shape[1],1))
#p_y = np.copy(p_x)
#p_z = np.ones(shape = (M_old.values.shape[1],1))
#p = np.concatenate((p_x, p_y, p_z), axis = 1).T


#cubic_solver = R_sys.cubic_solver
#
#a1 = lam**2
#b1 = 2*lam*(bdp(a.T, p.T) + lam*(bdp(p.T, f.T)))
#c1 = 1+np.linalg.norm(a) - lam*(bdp(a.T, f.T)) + 3*lam*\
#(bdp(a.T, p.T)) * (bdp(p.T, f.T)) + \
#lam**2*(bdp(p.T, f.T))
#d1 = -lam*(bdp(a.T, p.T)*(bdp(p.T,f.T))) - (bdp(a.T, p.T)*(bdp(p.T,f.T)))\
#+ lam*((bdp(a.T, p.T)*(bdp(p.T,f.T))**2))\
#+np.linalg.norm(a)**2*(bdp(p.T, f.T))
#-bdp(np.cross(a.T, p.T),f.T)
#Z = np.zeros(shape = b1.shape)
#X = np.copy(Z)
#Y = np.copy(Z)
#x_new_values = np.copy(Z)
#for k in np.arange(0,x_new_values.shape[1]):
#    Z[k] = cubic_solver(a1,b1[k],c1[k],d1[k],M_old.x.value[k])
#
#X = (bdp(a.T,f.T)) - lam*Z*(Z+bdp(p.T,f.T))
#Y = Z+bdp(p.T,f.T)
#
#x_new_values = 1/np.linalg.norm(np.cross(a.T,p.T).T)**2*\
#((X - (bdp(a.T,p.T))*Y).T*a\
#  + (((np.linalg.norm(a))**2*Y) - (bdp(a.T,p.T))).T*p\
#  + (Z*np.cross(a.T, p.T)).T)
#
#
#def cubic_solver(a,b,c,d,x0):
#    '''
#    Solves the cubic function f(x) = ax^3 + bx^2 + cx + d = 0
#    for the real root, assuming f(x) has only one real root
#    '''
#
#    step_size = 1/np.linalg.norm(R_sys.M_old.values)
#    ss = step_size
#
#    def res_cubic(x):
#        '''
#        cubic function
#        '''
#        return a*x**3 + b*x**2 + c*x + d
#    
#    root = R_sys.secant_method(res_cubic,x0,x0 + ss,maxit=100)
#    
#    fig = plt.figure()
#    ax = fig.add_subplot(111)
#    x = np.arange(root-50000*ss,root+50000*ss,100*ss)
#    ax.plot(x,res_cubic(x))
#    plt.show()
#
#    return root
#######################################################

### Debugging implementation of boundary conditions

#######################################################

#E_old = R_sys.E_old
#
#def Fx(t):
#    F_x = np.zeros(shape=(E_old.x.value.shape[0],1))
#    x = np.copy(F_x)
#    y = np.copy(x)
#    z = np.copy(x)
#    
#    dx = disc[0]
#    dy = disc[1]
#    dz = disc[2]
#
#    nx = E_old.x.nx
#    ny = E_old.x.ny
#    nz = E_old.x.nz
#    for ll in np.arange(0,nz-1):
#        for kk in np.arange(0,ny-1):
#            for jj in np.arange(0,nx-1):
#                    print('jj',jj,'\n',
#                          'kk',kk,'\n',
#                          'll',ll)
#                x = (jj+1/2)*2*dx
#                y = kk*2*dy
#                z = ll*2*dz
#                F_x[jj + nx*kk + nx*ny*ll] = R_sys.fx(x,y,z,t)
#
#    return F_x

#######################################################

### Debugging Dz set-up and computation

#######################################################

#from scipy.sparse import lil_matrix   
#
#def Dz(R_sys):
#    '''
#    Gives vector approximation to derivative w.r.t. z               
#    '''
#    x = R_sys.E_old.x
#    
#    ind = x.myind_std
#    dx = x.dx
#    dy = x.dy
#    dz = x.dz
#    
#    row_num = x.nx*x.ny*(x.nz-1)
#                    ## rows       columns
#    Al = lil_matrix((int(row_num), int(x.length)), dtype='float')
#    for ll in range(1,x.nz-1): #Moving through each slice
#        for kk in range(0,x.ny): #Moving through each row
#            for jj in range(0,x.nx): #Moving through each node
#                try:
#                    Al[ind(jj*dx,kk*dy,ll*dz),ind(jj*dx,kk*dy,(ll+1)*dz)] = 1/(2*dz)
#                    Al[ind(jj*dx,kk*dy,ll*dz),ind(jj*dx,kk*dy,(ll-1)*dz)] = -1/(2*dz)
#                except IndexError:
#                    print('This is where the error is',
#                          'jj: ',jj,'\n',
#                          'kk: ',kk,'\n',
#                          'll: ',ll,'\n',
#                          'ind: ',ind(jj*dx,kk*dy,ll*dz))
#                    raise Exception
#    A1 = Al.tocsr()
#        
#    return A1*x.value

#######################################################

### Testing better dot product

#######################################################


#t = dt
#
#F = np.concatenate((R_sys.Fx(t), R_sys.Fy(t), R_sys.Fz(t)), axis=1)
#E_new_values = E_old.values + dt*H_old.curl()
#
##Setting all E boundaries to 0
#for j in b_ind[0]:
#    E_new_values[0][j] = 0
#for k in b_ind[1]:
#    E_new_values[1][k] = 0
#for l in b_ind[2]:
#    E_new_values[2][l] = 0

#Forcing term and boundary conditions inside F
#E_new_values = E_new_values+F.T
#R_sys.E_new = E_new_values
#
#B_new_values = B_old.values - dt*R_sys.E_new.curl()
#R_sys.B_new = B_new_values
#
#B_on = (B_old.values + B_new_values)/2
#
#f = 2*M_old.values
#a = -(abs(gamma)*dt/2)*(B_on/mu0 + R_sys.H_s.values) - alpha*M_old.values
#
#bdp = R_sys.better_dot_pdt


####################################

### 2D case set-up and testing

####################################

#class test_Ferro_sys(object):
#    '''    
#    Attributes
#    ----------
#    X0: list
#        3 columns of initial conditions for field X, each column corresponding to 
#        the X,Y,Z components        
#    node_count: np.array, length = 1 or 3
#        Will give the number of nodes in one 'direction'
#            - Assuming same number of nodes in each row
#                if only one number is passed
#    disc: np_array of length 3
#        Contains the step-size in the x,y,z direction, in that order
#    dt: float
#        Time-step value. 
#    T: float
#        Final time
#        
#    '''
#    
#    def __init__(self,node_count,disc,E0,H0,M0,H_s):
#        # Parameter Set-up
#        self.dt = 0.1 
#        self.T = 1.0
#
#        self.disc = disc
#        self.node_count = node_count
#        if node_count.size == 1:
#            nx = node_count
#            ny = node_count
#            nz = node_count
#        elif node_count.size == 3:
#            nx = node_count[0]
#            ny = node_count[1]
#            nz = node_count[2]
#        else:
#            print('*'*40,'\n','Error in given node_count. Abort','\n','*'*40)
#            raise Exception
#            
#        
#        # Sizing #
#        '''
#        This is now done in the function "sizing" below, so that it can be changed
#        on the fly
#        '''
#        ### Sizing for even number of nodes v.1.1
##        if nx%2 == 0:
##            print('Warning: Beta-testing still under-way; possible poor grid')
##            wait = input('Press ENTER to continue, or CTRL C to break')
##            self.size_outer_x = np.array([nx/2, nx/2, nx/2]).astype('int')
##            self.size_outer_y = np.array([nx/2, nx/2, nx/2]).astype('int')
##            self.size_outer_z = np.array([nx/2, nx/2, nx/2]).astype('int')
##            
##            self.size_inner_x = np.array([nx/2, nx/2, nx/2]).astype('int')
##            self.size_inner_y = np.array([nx/2, nx/2, nx/2]).astype('int')
##            self.size_inner_z = np.array([nx/2, nx/2, nx/2]).astype('int')
##        
##        ### Sizing for odd number of nodes below 
##        else:
##            self.size_outer_x = np.array([(nx-1)/2, (nx+1)/2, (nx+1)/2]).astype('int')
##            self.size_outer_y = np.array([(nx+1)/2, (nx-1)/2, (nx+1)/2]).astype('int')
##            self.size_outer_z = np.array([(nx+1)/2, (nx+1)/2, (nx-1)/2]).astype('int')
##            
##            self.size_inner_x = np.array([(nx+1)/2, (nx-1)/2, (nx-1)/2]).astype('int')
##            self.size_inner_y = np.array([(nx-1)/2, (nx+1)/2, (nx-1)/2]).astype('int')
##            self.size_inner_z = np.array([(nx-1)/2, (nx-1)/2, (nx+1)/2]).astype('int')
#            
#    #       ### Old sizing v.1
#    #        self.size_Bx = np.array([(nx-3)/2, (nx-1)/2, (nx-1)/2]).astype('int')
#    #        self.size_By = np.array([(nx-1)/2, (nx-3)/2, (nx-1)/2]).astype('int')
#    #        self.size_Bz = np.array([(nx-1)/2, (nx-1)/2, (nx-3)/2]).astype('int')
#        
#    
##        self.a = np.round(np.array(self.sizing(nx,ny,nz)).prod(axis=1))
#        self.a = self.sizing(nx,ny,nz)
#        a = self.a
#        
#        ## See Research Notes 1/27/20 for more explanation on above ##
#        
#        self.E_nx = a[0]
#        self.E_ny = a[1]
#        self.E_nz = a[2]
#        
#        self.B_nx = a[3]
#        self.B_ny = a[4]
#        self.B_nz = a[5]
#        
#        ### Included here to make up for a previous mistake
#        ### and to deal with my laziness to change all
#        ### of the following code. 
#        
#        self.size_Ex = self.E_nx
#        self.size_Ey = self.E_ny
#        self.size_Ez = self.E_nz
#        
#        self.size_Bx = self.B_nx
#        self.size_By = self.B_ny
#        self.size_Bz = self.B_nz
#        
#        # Field set-up #
#        self.E_old = E0
#        
#        self.H_old = H0
#        self.M_old = M0
#        self.B0 = mu0*H0 + M0 
#        self.B_old = self.B0
#        self.H_s = H_s
#        
#        self.E_new = E0
#        self.H_new = H0
#        self.M_new = M0
#        self.B_new = self.B0
#        
#    def sizing(self,nx,ny,nz):
#        if nz != 1:
#            size_outer_x = np.array([(nx-1)/2, (ny+1)/2, (nz+1)/2])
#            size_outer_y = np.array([(nx+1)/2, (ny-1)/2, (nz+1)/2])
#            size_outer_z = np.array([(nx+1)/2, (ny+1)/2, (nz-1)/2])
#        
#        #    size_Bx = np.array([(nx-3)/2, (nx-1)/2, (nx-1)/2])
#        #    size_By = np.array([(nx-1)/2, (nx-3)/2, (nx-1)/2])
#        #    size_Bz = np.array([(nx-1)/2, (nx-1)/2, (nx-3)/2])
#            
#            size_inner_x = np.array([(nx+1)/2, (ny-1)/2, (nz-1)/2])
#            size_inner_y = np.array([(nx-1)/2, (ny+1)/2, (nz-1)/2])
#            size_inner_z = np.array([(nx-1)/2, (ny-1)/2, (nz+1)/2])
#            
#        else:
#            '''
#            Note that for this case, the not-used will have the amount of 
#            the field with which they are associated, simply to make concatentation
#            work properly
#            '''
#            size_outer_x = np.array([(nx-1)/2, (ny+1)/2, 1])
#            size_outer_y = np.array([(nx+1)/2, (ny-1)/2, 1])
#            size_outer_z = np.array([(nx+1)/2, (ny-1)/2, 1]) # Not included in calculations
#        
#        #    size_Bx = np.array([(nx-3)/2, (nx-1)/2, (nx-1)/2])
#        #    size_By = np.array([(nx-1)/2, (nx-3)/2, (nx-1)/2])
#        #    size_Bz = np.array([(nx-1)/2, (nx-1)/2, (nx-3)/2])
#            
#            size_inner_x = np.array([(nx-1)/2, (ny-1)/2, 1]) # Not included in calculations
#            size_inner_y = np.array([(nx-1)/2, (ny-1)/2, 1]) # Not included in calculations
#            size_inner_z = np.array([(nx-1)/2, (ny-1)/2, 1])
#            
#        return [size_outer_x, size_outer_y, size_outer_z,\
#                size_inner_x, size_inner_y, size_inner_z]
##
#        
#
#### Parameters (global)
#mu0 = 1.25667e-6
#eps = 0.88422e-11
#gamma = 2.2e5
#K = 0
#alpha = 0.2
#H_s_val = 10**5
#
#### Parameters (system)
#max_x = 16.4
#disc = np.array([0.4, 0.4, 0.0])
#
#dt = 5e-10
#T = 6e-8
#
#
#if (max_x/disc[0])%2 == 0:
#    print('Warning. Grid could fail, untested')
#    nx = round(max_x/disc[0])
#    
#elif (max_x/disc[0])%2 == 1:
#    nx = round(max_x/disc[0])
#    
#else:
#    print('That domain and disc not available'
#          '\n','Attempting closest available disc.')
#    max_x = max_x - (max_x/disc[0])%2
#    nx = round(max_x/disc[0])
#    
#def sizing(nx,ny,nz):
#    if nz != 1:
#        size_outer_x = np.array([(nx-1)/2, (ny+1)/2, (nz+1)/2])
#        size_outer_y = np.array([(nx+1)/2, (ny-1)/2, (nz+1)/2])
#        size_outer_z = np.array([(nx+1)/2, (ny+1)/2, (nz-1)/2])
#        
#        size_inner_x = np.array([(nx+1)/2, (ny-1)/2, (nz-1)/2])
#        size_inner_y = np.array([(nx-1)/2, (ny+1)/2, (nz-1)/2])
#        size_inner_z = np.array([(nx-1)/2, (ny-1)/2, (nz+1)/2])
#        
#    else:
#        '''
#        Note that for this case, the not-used will have the amount of 
#        the field with which they are associated, simply to make concatentation
#        work properly
#        '''
#        size_outer_x = np.array([(nx-1)/2, (ny+1)/2, 1])
#        size_outer_y = np.array([(nx+1)/2, (ny-1)/2, 1])
#        size_outer_z = np.array([(nx+1)/2, (ny-1)/2, 1]) # This will not be included in calculations
#        
#        size_inner_x = np.array([(nx-1)/2, (ny-1)/2, 1]) # This will not be included in calculations
#        size_inner_y = np.array([(nx-1)/2, (ny-1)/2, 1]) # This will not be included in calculations
#        size_inner_z = np.array([(nx-1)/2, (ny-1)/2, 1])
#        
#    return [size_outer_x, size_outer_y, size_outer_z,\
#            size_inner_x, size_inner_y, size_inner_z]
#
#ny = nx
#node_count = np.array([nx, ny, 1])
#
#a = np.round(np.array(sizing(node_count[0], node_count[1], node_count[2])).prod(axis=1))
#
#### Initial conditions
#E0_x = np.zeros(shape = (int(a[0]),1))
#E0_y = np.zeros(shape = (int(a[1]),1))
#E0_z = np.zeros(shape = (int(a[2]),1))
#E0 = np.concatenate((E0_x, E0_y, E0_z),axis=1).T
#
#B0_x = np.zeros(shape = (int(a[3]),1))
#B0_y = np.zeros(shape = (int(a[4]),1))
#B0_z = np.zeros(shape = (int(a[5]),1))
#B0 = np.concatenate((B0_x, B0_y, B0_z),axis=1).T
#
#M0_x = np.zeros(shape = (int(a[3]),1))
#M0_y = np.zeros(shape = (int(a[4]),1))
#M0_z = 100*np.ones(shape = (int(a[5]),1)) 
#M0 = np.concatenate((M0_x, M0_y, M0_z),axis=1).T
#
#H0_x = np.zeros(shape = (int(a[3]),1))
#H0_y = np.zeros(shape = (int(a[4]),1))
#H0_z = np.zeros(shape = (int(a[5]),1))
#H0 = np.concatenate((H0_x, H0_y, H0_z),axis=1).T
#
#H_s_x = H_s_val*np.ones(shape = (int(a[3]),1))
#H_s_y = H_s_val*np.ones(shape = (int(a[4]),1))
#H_s_z = H_s_val*np.ones(shape = (int(a[5]),1))
#H_s = np.concatenate((H_s_x, H_s_y, H_s_z),axis=1).T
#
#R_sys = Ferro_sys(node_count,disc,E0,H0,M0,H_s)

##########################
# Debugging curl size issue
#########################
'''
Issue is coming from the row_num = (x.nx-1)*x.ny*x.nz. 
The size we want is x.nx * x.ny-1. For x deriv of x Vector, 
this doesn't matter, but because in the 2D case, the z vector takes
on the same size as the x or y, there is an issue
'''

#from scipy.sparse import lil_matrix
#    
#x = R_sys.E_old.x
#ind = x.myind_std
#dx = x.dx
#dy = x.dy
#dz = x.dz
#
#row_num = (x.nx-1)*x.ny*x.nz
#                ## rows       columns
#Al = lil_matrix((int(row_num), int(x.length)), dtype='float')
#for ll in range(0,x.nz-1): #Moving through each inner slice
#    for kk in range(0,x.ny-1): #Moving through each inner row
#        for jj in range(1,x.nx-1): #Moving through each inner node
#            Al[ind(jj*dx,kk*dy,ll*dz),ind((jj+1)*dx,kk*dy,ll*dz)] = 1/(2*dx)
#            Al[ind(jj*dx,kk*dy,ll*dz),ind((jj-1)*dx,kk*dy,ll*dz)] = -1/(2*dx)
#            
#A1 = Al.tocsr()

#################################

### Debugging 2D forcing term

#################################

#def Fy(t):
#    F_y = np.zeros(shape=(R_sys.E_old.y.value.shape[0],1))
#    dx = R_sys.disc[0]
#    dy = R_sys.disc[1]
#    dz = R_sys.disc[2]
#
#    nx = R_sys.E_old.y.nx
#    ny = R_sys.E_old.y.ny
#    nz = R_sys.E_old.y.nz
#    
#    if nz != 1:
#        for ll in np.arange(0,nz-1):
#            for kk in np.arange(0,ny-1):
#                for jj in np.arange(0,nx-1):
#                    x = jj*2*dx
#                    y = (kk+1/2)*2*dy
#                    z = ll*2*dz
##                    print('jj',jj,'\n',
##                          'kk',kk,'\n',
##                          'll',ll,'\n',
##                          'x: ',x,'\n',
##                          'y: ',y,'\n',
##                          'z: ',z,'\n')
##                    if jj == nx-2:
##                        wait = input('Press ENTER to continue')
#                        
#                    F_y[jj + nx*kk + nx*ny*ll] = R_sys.fy(x,y,z,t)
#    else:
#        for ll in np.arange(0,1):
#            for kk in np.arange(0,ny-1):
#                for jj in np.arange(0,nx-1):
#                    x = jj*2*dx
#                    y = (kk+1/2)*2*dy
#                    z = ll*2*dz
##                    print('jj',jj,'\n',
##                          'kk',kk,'\n',
##                          'll',ll,'\n',
##                          'x: ',x,'\n',
##                          'y: ',y,'\n',
##                          'z: ',z,'\n',
##                          'f: ',R_sys.fy(x,y,z,t),'\n')
##                    if jj == nx-2:
##                        wait = input('Press ENTER to continue')
#
#                    F_y[jj + nx*kk + nx*ny*ll] = R_sys.fy(x,y,z,t) 
#        
#
#    return F_y

#################################

### Debugging 2D mathematics
'''
Want to know why the forcing term is not dispersing across Ey. 
'''

#################################
#E_old = R_sys.E_old
#B_old = R_sys.B_old
#H_old = R_sys.H_old
#M_old = R_sys.M_old
#b_ind = R_sys.bound_ind
#
## Actual computation of time stepping
#R_sys.set_up()
#
#F = np.concatenate((R_sys.Fx(t), R_sys.Fy(t), R_sys.Fz(t)),axis=1)
#E_new_values = E_old.values + dt*H_old.curl()
#
##Setting all E boundaries to 0
#for j in b_ind[0]:
#    E_new_values[0][j] = 0 #x_bound(j)
#for k in b_ind[1]:
#    E_new_values[1][k] = 0
#for l in b_ind[2]:
#    E_new_values[2][l] = 0
#
#### Forcing term and boundary conditions inside F
#E_new_values = E_new_values+F.T
#R_sys.E_new = E_new_values
#
#B_new_values = B_old.values - dt*R_sys.E_new.curl()
#R_sys.B_new = B_new_values
#
#B_on = (B_old.values + B_new_values)/2
#
#f = 2*M_old.values
#a = -(abs(gamma)*dt/2)*(B_on/mu0 + R_sys.H_s.values) - alpha*M_old.values
#lam = -K*abs(gamma)*R_sys.dt/4
#
#a_dot_f =  bdp(a.T,f.T).T
#
#p_x = np.zeros(shape = (M_old.values.shape[1],1))
#p_y = np.copy(p_x)
#p_z = np.ones(shape = (M_old.values.shape[1],1))
#p = np.concatenate((p_x, p_y, p_z), axis = 1).T
#
#
#cubic_solver = R_sys.cubic_solver
#
#a1 = lam**2
#b1 = 2*lam*(bdp(a.T, p.T) + lam*(bdp(p.T, f.T)))
#c1 = 1+np.linalg.norm(a) - lam*(bdp(a.T, f.T)) + 3*lam*\
#(bdp(a.T, p.T)) * (bdp(p.T, f.T)) + \
#lam**2*(bdp(p.T, f.T))
#d1 = -lam*(bdp(a.T, p.T)*(bdp(p.T,f.T))) - (bdp(a.T, p.T)*(bdp(p.T,f.T)))\
#+ lam*((bdp(a.T, p.T)*(bdp(p.T,f.T))**2))\
#+np.linalg.norm(a)**2*(bdp(p.T, f.T))
#-bdp(np.cross(a.T, p.T),f.T)
#Z = np.zeros(shape = b1.shape)
#X = np.copy(Z)
#Y = np.copy(Z)
#x_new_values = np.copy(Z)
#for k in np.arange(0,x_new_values.shape[1]):
#    Z[k] = cubic_solver(a1,b1[k],c1[k],d1[k],M_old.x.value[k])
#
#X = (bdp(a.T,f.T)) - lam*Z*(Z+bdp(p.T,f.T))
#Y = Z+bdp(p.T,f.T)
#
#x_new_values = 1/np.linalg.norm(np.cross(a.T,p.T).T)**2*\
#((X - (bdp(a.T,p.T))*Y).T*a\
#  + (((np.linalg.norm(a))**2*Y) - (bdp(a.T,p.T))).T*p\
#  + (Z*np.cross(a.T, p.T)).T)










