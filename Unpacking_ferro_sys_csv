#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Feb 12 10:39:35 2020

@author: evanraj
"""

import os
import sys

l_path = '..'
m_path = os.path.abspath(l_path)
if not os.path.exists(m_path):
    print('Error importing modules. Need to specify new path')
    raise Exception
else:
    sys.path.append(m_path)

import numpy as np
#import scipy as sp
from scipy.sparse import lil_matrix
from mpl_toolkits import mplot3d # Needed even though 'unused' variable
import matplotlib.pyplot as plt
#from matplotlib import cm
plt.rcParams['backend'] = "Qt4Agg"

## For saving data
import pandas as pd
from collections import OrderedDict

from Research import field_class
Field = field_class.Field_2
Vector = field_class.Vector

from Research import ferro_system1
Ferro_sys = ferro_system1.Ferro_sys

### Name of things to unpack
#name = today+'/'+'test1'
name_date = '20_05_20'
# name_data1 = 'Refined_grid_free_space'
# name_data = 'Free_space_ADI_v2'

### Dictionary to be able to run and compile multiple runs over and over
### This allows for an indeterminate amount of runs to be tested together
### as long as they're in the same directory
         
# names = {name_data:50, 
#          'Ricker_left_ADI_CFL10':5,
#          'Ricker_Yee_free_space':50}

name_dict = {'Ricker_ADI_CFL10_LLG':25}

l1 = np.zeros(shape = 10) ## How many nodes to check (better name?)
ticker_start = 1 ## Where do you want to start your unpacking

# dt_name = 50 ## How often saved. Works with new saving style.  ### Now set above in names dictionary

def set_up_ferro_system(name_ticker, name_data):
    '''
    Sets up R_sys, given the name
    '''
    try: 
        df_inner = pd.read_csv(name_date+'/'+name_ticker+'/'+name_data+'_inner.csv')
        df_outer = pd.read_csv(name_date+'/'+name_ticker+'/'+name_data+'_outer.csv')
        # df_param = pd.read_csv(name+'_param.csv')
        df_param = pd.read_csv(name_date+'/'+name_data+'_param.csv') ## Parameters now saved only once
        # df_param = pd.read_csv('10_04_20/time:2.95e-07/Refined_grid_free_space_param.csv')
        # df_param = pd.read_csv('13_04_20/time:2.95e-07/Non-Ricker_free_space_param.csv')

    except FileNotFoundError:
        print('Error importing csv. Abort')
        raise Exception
    
    E0 = np.concatenate((np.array([df_outer['E.x'].values]), 
                         np.array([df_outer['E.y'].values]),
                         np.array([df_outer['E.z'].values])),axis=0)
    M0 = np.concatenate((np.array([df_inner['M.x'].values]),
                         np.array([df_inner['M.y'].values]),
                         np.array([df_inner['M.z'].values])),axis=0)
    H0 = np.concatenate((np.array([df_inner['H.x'].values]), 
                         np.array([df_inner['H.y'].values]),
                         np.array([df_inner['H.z'].values])),axis=0)
    
    H_s_val = df_param['H_s'][0]
    H_s = H_s_val * np.ones(shape = H0.shape)
    node_count = np.ones(shape = (3,1))
    node_count[0] = df_param['gnx'][0]
    node_count[1] = df_param['gny'][0]
    node_count[2] = df_param['gnz'][0]
    disc = np.ones(shape = (3,1))
    disc[0] = df_param['disc_x'][0]
    disc[1] = df_param['disc_y'][0]
    disc[2] = df_param['disc_z'][0]
    
    R_sys = Ferro_sys(node_count,disc,E0,H0,M0,H_s)
    
    R_sys.mu0 = df_param['mu0'][0]
    R_sys.eps = df_param['eps'][0]
    R_sys.gamma = df_param['gamma'][0]
    R_sys.K = df_param['K'][0]
    R_sys.alpha = df_param['alpha'][0] 
    R_sys.H_s = df_param['H_s'][0]
    
    R_sys.dt = df_param['dt'][0]
    R_sys.T = df_param['T']
    
    return R_sys

### For unpacking a bunch of saved runs

ticker = ticker_start
for k in l1:
    print(ticker)
    # name = name_date + '/time:'+str(round(ticker*.5e-08,10))+'/'+name_data
    # name = name_date + '/time:'+str(round(dt_name*ticker,12))+'/'+name_data
    

    # name1 = name_date + '/time:'+str(round(ticker*.5e-08,14))+'/'+name_data1
    # name2 = name_date + '/time:'+str(round(ticker*.5e-08,14))+'/'+name_data2
    # print(name)
    try:
        ticker+=1
        # fig12, (ax121) = plt.subplots(3,1)
        # fig31, (ax131, ax132, ax133) = plt.subplots(3,1)
        for name_a in name_dict:
            name_ticker = 'ticker:'+str(name_dict[name_a]*ticker)
            R_sys = set_up_ferro_system(name_ticker, name_a)
            R_sys.T = ticker*name_dict[name_a]*R_sys.dt
            
            # fig,ax = R_sys.plot_slice('E','x')
            # fig2,ax2 = R_sys.plot_slice('E','y')
            fig3,ax3 = R_sys.plot_slice('M','z')
            
            # fig,ax = R_sys.plot_line('E','x',cs = 20 )
            # fig2,ax2 = R_sys.plot_line('E','y', cs = 20)
            # fig3,ax3 = R_sys.plot_line('E','z', cs = 20)
        
            # line1 = ax.get_lines()[0]
            # ax131.plot(line1.get_data()[0], line1.get_data()[1],'--',label = r'$E_x$')
            
            # line2 = ax2.get_lines()[0]
            # ax132.plot(line1.get_data()[0], line1.get_data()[1],'--',label = r'$E_y$')
            
            # line3 = ax3.get_lines()[0]
            # ax133.plot(line1.get_data()[0], line1.get_data()[1],'--',label = r'$E_z$')
       
        # ax121.set_title('Plots of varying algorithms')
        # ax131.legend()
        # ax132.legend()
        # ax133.legend()
        
        # print(name1)        
        # R_sys1 = set_up_ferro_system(name1)
        # R_sys2 = set_up_ferro_system(name2)
        # print(name2)
        
        # ax.view_init(elev = 90,azim = 90) ## For rotating 3D plots

    except:
        print('Error importing, try again')
        pass
    
    # try:
        # l1[k] = np.linalg.norm(R_sys1.E_old.y.value - R_sys2.E_old.y.value,2)
    # except:
        # print('Error is in assignment')
