#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Feb 12 10:39:35 2020

@author: evanraj
"""

import os
import sys
from datetime import date

today1 = date.today()
today = today1.strftime("%d_%m_%y")

l_path = '..'
m_path = os.path.abspath(l_path)
if not os.path.exists(m_path):
    print('Error importing modules. Need to specify new path')
    raise Exception
else:
    sys.path.append(m_path)

import numpy as np
#import scipy as sp
from scipy.sparse import lil_matrix
from mpl_toolkits import mplot3d # Needed even though 'unused' variable
import matplotlib.pyplot as plt
#from matplotlib import cm
plt.rcParams['backend'] = "Qt4Agg"

## For saving data
import pandas as pd
from collections import OrderedDict

from Research import field_class
Field = field_class.Field_2
Vector = field_class.Vector

from Research import ferro_system1
Ferro_sys = ferro_system1.Ferro_sys

#name = today+'/'+'test1'
name = '25_02_20/test1'

try: 
    df_inner = pd.read_csv(name+'_inner.csv')
    df_outer = pd.read_csv(name+'_outer.csv')
    df_param = pd.read_csv(name+'_param.csv')
except FileNotFoundError:
    print('Error importing csv. Abort')
    raise Exception

E0 = np.concatenate((np.array([df_outer['E.x'].values]), 
                     np.array([df_outer['E.y'].values]),
                     np.array([df_outer['E.z'].values])),axis=0)
B0 = np.concatenate((np.array([df_inner['B.x'].values]), 
                     np.array([df_inner['B.y'].values]), 
                     np.array([df_inner['B.z'].values])),axis=0)
M0 = np.concatenate((np.array([df_inner['M.x'].values]),
                     np.array([df_inner['M.y'].values]),
                     np.array([df_inner['M.z'].values])),axis=0)
H0 = np.concatenate((np.array([df_inner['H.x'].values]), 
                     np.array([df_inner['H.y'].values]),
                     np.array([df_inner['H.z'].values])),axis=0)

H_s_val = df_param['H_s'][0]
H_s = H_s_val * np.ones(shape = H0.shape)
size = df_param['size'][0]
disc = df_param['disc'][0]*np.ones(shape = (3,1))

R_sys = Ferro_sys(size,disc,E0,H0,M0,H_s)