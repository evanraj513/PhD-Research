#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Feb  4 18:30:34 2020

@author: evanraj
"""

import os
import sys
from datetime import date

def mkdir_p(mypath):
    '''Creates a directory. equivalent to using mkdir -p on the command line'''

    from errno import EEXIST
    from os import makedirs,path

    try:
        makedirs(mypath)
    except OSError as exc: 
        if exc.errno == EEXIST and path.isdir(mypath):
            pass
        else: raise

import numpy as np
from mpl_toolkits import mplot3d
import matplotlib.pyplot as plt
from matplotlib import cm
plt.rcParams['backend'] = "Qt4Agg"
from collections import OrderedDict
import pandas as pd

l_path = '..'
m_path = os.path.abspath(l_path)
if not os.path.exists(m_path):
    print('Error importing modules. Need to specify new path')
    raise Exception
else:
    sys.path.append(m_path)

#import numpy as np
#import scipy as sp
#from scipy.sparse import csr_matrix

from Research import ferro_system1
Ferro_sys = ferro_system1.Ferro_sys

### Saving parameters
cont = 1 ## Continue with time-run. Else, just set up system.
save_time_steps = True ## Turn on to ho time steps from run
save_final_time = True ## Save where the run ends
ho = 50 ## How often to save data

today1 = date.today()
name_date = today1.strftime("%d_%m_%y")
mkdir_p(name_date)
name_data ='No_alpha_free_space' 

### Parameters (global)
mu0 = 1.25667e-6
eps = 8.5422e-12
c = 1/(mu0*eps)**(1/2) ## Speed of light
gamma = 2.2e5
K = 0
alpha = 0.
H_s_val = 10**5 ## H_s value
init_mag = 0 ## Magnetization initialization constant for M_z, 0 => free-space (non-LLG)

### Parameters (system)
max_x = 3.0
disc = np.array([0.04, 0.04, 0.04])
                            # Not used
dt = 1e-10
T = 1e-7 ## Final time
T = np.round(T,14)

## Making sure we have an odd-number for global nodes, otherwise
## the grid will not be uniform for Yee scheme
if np.round(max_x/disc[0])%2 == 0:
    print('Warning. Even grid. Extending spatial domain to','\n',\
          'have an odd-number of grid points in all direction')
    gnx = round((max_x+disc[0])/disc[0])
    
elif np.round(max_x/disc[0])%2 == 1:
    gnx = round(max_x/disc[0])
    
# else:
#     print('That domain and disc not available',
#           '\n','Attempting closest available disc.')
#     max_x = max_x - (max_x/disc[0])%2
#     gnx = round(max_x/disc[0])

### System parameters contd    
gny = gnx
gnz = 1

def set_up_system(gnx,gny,gnz,disc):
    '''
    Sets up Ferrosystem to be run. 
    '''
        
    def sizing(nx,ny,nz):
        if nz != 1:
            size_outer_x = np.array([(nx-1)/2, (ny+1)/2, (nz+1)/2])
            size_outer_y = np.array([(nx+1)/2, (ny-1)/2, (nz+1)/2])
            size_outer_z = np.array([(nx+1)/2, (ny+1)/2, (nz-1)/2])
            
            size_inner_x = np.array([(nx+1)/2, (ny-1)/2, (nz-1)/2])
            size_inner_y = np.array([(nx-1)/2, (ny+1)/2, (nz-1)/2])
            size_inner_z = np.array([(nx-1)/2, (ny-1)/2, (nz+1)/2])
            
        else:
            '''
            Note that for this case, the not-used will have the amount of 
            the field with which they are associated, simply to make concatentation
            work properly
            '''
            size_outer_x = np.array([(nx-1)/2, (ny+1)/2, 1])
            size_outer_y = np.array([(nx+1)/2, (ny-1)/2, 1])
            size_outer_z = np.array([(nx+1)/2, (ny-1)/2, 1]) # This will not be included in calculations
        
            
            size_inner_x = np.array([(nx-1)/2, (ny-1)/2, 1]) # This will not be included in calculations
            size_inner_y = np.array([(nx-1)/2, (ny-1)/2, 1]) # This will not be included in calculations
            size_inner_z = np.array([(nx-1)/2, (ny-1)/2, 1])
            
        return [size_outer_x, size_outer_y, size_outer_z,\
                size_inner_x, size_inner_y, size_inner_z]
    
    ### Initial conditions
    node_count = np.array([gnx, gny, gnz])
    a = np.round(np.array(sizing(node_count[0], node_count[1], node_count[2])).prod(axis=1))
    
    ####################################################
    ########### Initial conditions ################
    ####################################################
    E0_x = np.zeros(shape = (int(a[0]),1))
    E0_y = np.zeros(shape = (int(a[1]),1))
    E0_z = np.zeros(shape = (int(a[2]),1))
    E0 = np.concatenate((E0_x, E0_y, E0_z),axis=1).T
    
    # B0_x = np.zeros(shape = (int(a[3]),1))
    # B0_y = np.zeros(shape = (int(a[4]),1))
    # B0_z = np.zeros(shape = (int(a[5]),1))
    # B0 = np.concatenate((B0_x, B0_y, B0_z),axis=1).T
    
    M0_x = np.zeros(shape = (int(a[3]),1))
    M0_y = np.zeros(shape = (int(a[4]),1))

    M0_z = init_mag*np.ones(shape = (int(a[5]),1))
    M0 = np.concatenate((M0_x, M0_y, M0_z),axis=1).T
    
    H0_x = np.zeros(shape = (int(a[3]),1))
    H0_y = np.zeros(shape = (int(a[4]),1))
    H0_z = np.zeros(shape = (int(a[5]),1))
    H0 = np.concatenate((H0_x, H0_y, H0_z),axis=1).T
    
    H_s_x = H_s_val*np.ones(shape = (int(a[3]),1))
    H_s_y = H_s_val*np.ones(shape = (int(a[4]),1))
    H_s_z = H_s_val*np.ones(shape = (int(a[5]),1))
    H_s = np.concatenate((H_s_x, H_s_y, H_s_z),axis=1).T
    
    R_sys = Ferro_sys(node_count,disc,E0,H0,M0,H_s)
    
    ####################################################
    ################# Run parameters ##################
    ####################################################
    R_sys.dt = dt
    R_sys.mu0 = mu0
    R_sys.eps = eps
    R_sys.gamma = gamma
    R_sys.K = K
    R_sys.alpha = alpha
    R_sys.H_s_val = H_s_val
    
    return R_sys
    
###################################################
### Boundary conditions, and Forcing terms ########
###################################################

### Ricker Pulse
    
## Ricker Pulse parameters
beta0 = 4E4
f = 4E7
a = 1.34
b = 3.4
k = (np.pi/a)**2
c = 3E8

def g(x):
    '''
    Actual Ricker pulse function
    '''
    if x < b:
        pa = 2*k/11*(2*k*(x-a)**2-1)
        pb = (np.e**(-k*(x-a)**2))
        
        return pa*pb
    else:
        return 0
    
### Ricker Pulse forcing conditions at x = 0, applied to E_y 
### 'Normal' boundary conditions else
        

def f_x(x,y,z,t):
    '''
    Ricker Pulse for x
    '''
    return 0
    
def f_y(x,y,z,t):
    '''
    Ricker Pulse for y
    '''
    if abs(x) < disc[0]/4: #approx 0
        d = beta0*g(f*t)
        return d
    else:
        return 0
       
def f_z(x,y,z,t):
    '''
    Ricker Pulse for z
    '''
    return 0

#################################################
########### Actually running system #############

R_sys = set_up_system(gnx,gny,gnz,disc)

R_sys.fx = f_x
R_sys.fy = f_y
R_sys.fz = f_z

ticker = 0

for t in np.arange(dt,T,dt):
    ### re-initializing the system
    R_sys.set_up()
    ticker += 1
    if cont == True:
        pass
    else:
        break
    ## For output
    print('Current Time: ',np.round(t,12),' and Ticker: ',ticker)

    ### Running the system
    R_sys.T = t
    R_sys.single_run(t)
    
    ## Plotting stuff to demo

    if ticker%ho < 1E-12:
        # fig_Mz = R_sys.plot_slice('M','z',0)
        # fig_Ez = R_sys.plot_slice('E','x',0)
        # fig_Ey = R_sys.plot_slice('E','y',0)
        
        # # fig_Ey0 = R_sys.plot_line('E','y',0,0)
        # # fig_Ey1 = R_sys.plot_line('E','y',1,0)
        # # fig_Ey2 = R_sys.plot_line('E','y',2,0)
        # # fig_Ey3 = R_sys.plot_line('E','y',3,0)
        
        # fig = plt.figure()
        # t_val = np.arange(0,T,dt)
        # Ricker_vec = np.vectorize(f_y)
        # ax = fig.add_subplot(111)
        # ax.plot(t_val,Ricker_vec(0,0,0,t_val))
        # ax.axvline(x=t)
        # Title = 'Current Boundary value: '+str(round(f_y(0,0,0,t),2))
        # ax.set_title(Title)
        # plt.show()
        
        # wait = input('Press Enter to continue')
        
######### Turn on above to plot as you run
######### Only works for in Spyder running
        
        if save_time_steps == True:
            name_time = 'time:'+str(round(t,16))
            mkdir_p(name_date+'/'+name_time) #Creates sub-directory for this specific time
            R_sys.save_data(name_date+'/'+name_time+'/'+name_data) #Saves data 
            data = OrderedDict()
            data['mu0'] = mu0
            data['eps'] = eps 
            data['gamma'] = gamma
            data['K'] = K
            data['alpha'] = alpha
            data['H_s'] = H_s_val
            
                    # Parameters (system)
            data['max_x'] = max_x
            data['disc_x'] = disc[0]
            data['disc_y'] = disc[1]
            data['disc_z'] = disc[2]
            data['gnx'] = gnx
            data['gny'] = gny
            data['gnz'] = gnz
            data['T'] = t
            data['dt'] = dt
            data['CFL'] = c*dt/disc[0]
            
            df = pd.DataFrame([data])
            df.to_csv(name_date+'/'+name_time+'/'+name_data+'_param.csv')
        
    
    ## Updating old fields
    R_sys.E_old2 = R_sys.E_old.values
    R_sys.B_old2 = R_sys.B_old.values
    R_sys.M_old2 = R_sys.M_old.values
    R_sys.H_old2 = R_sys.H_old.values
    
    R_sys.E_old = R_sys.E_new.values
    R_sys.H_old = R_sys.H_new.values
    R_sys.M_old = R_sys.M_new.values
    R_sys.B_old = R_sys.B_new.values

## Plotting stuff

#fig_Mz = R_sys.plot_slice('M','z',10)
#fig_Bz = R_sys.plot_slice('B','z',10)
#fig_Ey = R_sys.plot_slice('E','y',10)
#fig_Hz = R_sys.plot_slice('H','z',10)


## Saving data
if save_final_time == True:
    R_sys.save_data(name_date+'/'+'time:'+str(round(T-dt,9))+'/'+name_data) ## Names defined above
    
        # Run parameters
            #Global Parameters
    data = OrderedDict()
    data['mu0'] = mu0
    data['eps'] = eps 
    data['gamma'] = gamma
    data['K'] = K
    data['alpha'] = alpha
    data['H_s'] = H_s_val
    
            # Parameters (system)
    data['max_x'] = max_x
    data['disc_x'] = disc[0]
    data['disc_y'] = disc[1]
    data['disc_z'] = disc[2]
    data['gnx'] = gnx
    data['gny'] = gny
    data['gnz'] = gnz
    data['T'] = T
    data['dt'] = dt
    data['CFL'] = c*dt/disc[0]
    
    df = pd.DataFrame([data])
    df.to_csv(name_date+'/'+'time:'+str(round(T-dt,14))+'/'+name_data+'_param.csv')

#fig_Mz.savefig(today+'/'+name+'Mz')
#fig_Ey.savefig(today+'/'+name+'Ey')

######################### Old Code ##################################

def make_1D_plot(Field = 'E', comp = 'y', cs = 0, s = 0):
    '''
    Function to plot a 'flat' (i.e. 2D) plot of the comp of the field,
    at some specific cross-section. Not a 3D slice, but a 2D cross-section
    of a specific slice
    '''
    F = Field
    

    if F == 'E':
        if comp == 'x':
            pc = R_sys.E_old.x
            ind = R_sys.ind_rev_x_out
        elif comp == 'y':
            pc = R_sys.E_old.y
            ind = R_sys.ind_rev_y_out
        elif comp == 'z':
            pc = R_sys.E_old.z
            ind = R_sys.ind_rev_z_out
        else:
            print('Error, not "x", "y", "z". No comprendo, start over')
            raise Exception
            
    elif F == 'B':
        if comp == 'x':
            pc = R_sys.B_old.x
            ind = R_sys.ind_rev_x_inn
        elif comp == 'y':
            pc = R_sys.B_old.y
            ind = R_sys.ind_rev_y_inn
        elif comp == 'z':
            pc = R_sys.B_old.z
            ind = R_sys.ind_rev_z_inn
        else:
            print('Error, not "x", "y", "z". No comprendo, start over')
            raise Exception
            
    elif F == 'M':
        if comp == 'x':
            pc = R_sys.B_old.x
            ind = R_sys.ind_rev_x_inn
        elif comp == 'y':
            pc = R_sys.B_old.y
            ind = R_sys.ind_rev_y_inn
        elif comp == 'z':
            pc = R_sys.B_old.z
            ind = R_sys.ind_rev_z_inn
        else:
            print('Error, not "x", "y", "z". No comprendo, start over')
            raise Exception
            
    elif F == 'H':
        if comp == 'x':
            pc = R_sys.B_old.x
            ind = R_sys.ind_rev_x_inn
        elif comp == 'y':
            pc = R_sys.B_old.y
            ind = R_sys.ind_rev_y_inn
        elif comp == 'z':
            pc = R_sys.B_old.z
            ind = R_sys.ind_rev_z_inn
        else:
            print('Error, not "x", "y", "z". No comprendo, start over')
            raise Exception
        
    fig = plt.figure()
    ax = fig.add_subplot(111)
    
    m_s = s*pc.nx*pc.ny
    if s >= pc.nz:
        print('Error, outside of domain. Cannot plot')
        raise Exception
        
    if comp == 'x':
        m_cs = pc.nx*cs
        
        x1 = np.zeros(shape = (pc.nx,1))
        y1 = np.copy(x1)
        
        for k in np.arange(m_s+m_cs,m_s+m_cs+x1.shape[0]):
            x1[k-m_s] = ind(k)[0]
            y1[k-m_s] = pc.value[k]
            
                  #   (num rows, num cols)
        x1 = x1.reshape(pc.ny, pc.nx)
        y1 = y1.reshape(pc.ny, pc.nx)
        ax.plot(x1,y1)
        title = 'Plot of: '+F+'_'+comp+'\n'+ 'slice number: '+str(s)+\
                '\n'+'cross_section: '+str(cs)
    #        print(title)
        ax.set_title(title)
    
    return fig

    

def cardanos_method(a,b,c,d,eps = 1E-12):
    '''
    Solves for the real root of a cubic polynomial. 
    Note that it will not solve for the symmetric
    real roots, even if they exist. 
    See here for more explanation:
        https://brilliant.org/wiki/cardano-method/
    '''
    if abs(a) < eps:
        print('*'*40,'\n','Error, not a cubic. Aborting','\n','*'*40)
        raise Exception
        
    def real_cubic_root(arg):
        '''
        Forces python to return the real root of a cubic. 
        Note: "< 0" case works as 
            -(-n)^(1/3) = ((-1)^3(-n))^(1/3) = ((-1)(-n))^(1/3) = (n)^1/3
        '''
        if type(arg) == complex:
            return (arg)**(1/3)
        else:
            if arg < 0:
                return -(-arg)**(1/3)
            else:
                return (arg)**(1/3)
    
    Q = (3*a*c - b**2)/(9*a**2)
    R = (9*a*b*c - 27*a**2*d - 2*b**3)/(54*a**3)
#    
#    if Q**3 > R**2-eps:
#        print('*'*40,'\n','Break. Error in cardanos method, cannot use',
#              'Dont know why, but Q**3 > R**2 is hard.','\n','*'*40)
#        raise Exception
    
    S = real_cubic_root(R + (Q**3 + R**2)**(1/2))
    T = real_cubic_root(R - (Q**3 + R**2)**(1/2))
    print('Q: ',Q,'\n'*2,
          'R: ',R,'\n'*2,
          'S: ',S,'\n'*2,
          'T: ',T,'\n'*2)
    
    root = S+T - (b)/(3*a)
    
    if abs(root.imag) > eps:
        print('Warning. Imaginary part of the root is too large.')
        wait = input('Press ENTER, or CTRL C to break')        
    
    return root.real
    

def det_E_M():
    '''
    Determines the vector of error_moduli for a given system
    as described in running notes 2/13
    '''
    M = R_sys.M_old.values
    
    E_M = abs(np.linalg.norm(M,axis=0) - np.linalg.norm(M0,axis=0))\
    /(np.linalg.norm(M0,axis=0))
    
    return E_M



    



