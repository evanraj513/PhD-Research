#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Feb  4 18:30:34 2020

@author: evanraj
"""

import os
import sys

import numpy as np
from mpl_toolkits import mplot3d
import matplotlib.pyplot as plt
from matplotlib import cm
plt.rcParams['backend'] = "Qt4Agg"

l_path = '..'
m_path = os.path.abspath(l_path)
if not os.path.exists(m_path):
    print('Error importing modules. Need to specify new path')
    raise Exception
else:
    sys.path.append(m_path)

#import numpy as np
#import scipy as sp
#from scipy.sparse import csr_matrix

from Research import ferro_system1
Ferro_sys = ferro_system1.Ferro_sys

### Parameters (global)
mu0 = 1.25667e-6
eps = 0.88422e-11
gamma = 2.2e5
K = 0
alpha = 0.2
H_s_guess = 10**5

### Parameters (system)
max_x = 16.4
disc = [0.4, 0.4, 0.4]
T = 6e-8
dt = 5e-10

if (max_x/disc[0])%2 == 0:
    print('Warning. Grid could fail, untested')
    size = round(max_x/disc[0])
    
elif (max_x/disc[0])%2 == 1:
    size = round(max_x/disc[0])
    
else:
    print('That domain and disc not available'
          '\n','Attempting closest available disc.')
    max_x = max_x - (max_x/disc[0])%2
    size = round(max_x/disc[0])
    
def sizing(nx):
    size_Ex = np.array([(nx-1)/2, (nx+1)/2, (nx+1)/2])
    size_Ey = np.array([(nx+1)/2, (nx-1)/2, (nx+1)/2])
    size_Ez = np.array([(nx+1)/2, (nx+1)/2, (nx-1)/2])

#    size_Bx = np.array([(nx-3)/2, (nx-1)/2, (nx-1)/2])
#    size_By = np.array([(nx-1)/2, (nx-3)/2, (nx-1)/2])
#    size_Bz = np.array([(nx-1)/2, (nx-1)/2, (nx-3)/2])
    
    size_Bx = np.array([(nx+1)/2, (nx-1)/2, (nx-1)/2])
    size_By = np.array([(nx-1)/2, (nx+1)/2, (nx-1)/2])
    size_Bz = np.array([(nx-1)/2, (nx-1)/2, (nx+1)/2])
    return [size_Ex, size_Ey, size_Ez, size_Bx, size_By, size_Bz]

### Initial conditions

# To give number of nodes
a = np.round(np.array(sizing(size)).prod(axis=1))

E0_x = np.zeros(shape = (int(a[0]),1))
E0_y = np.zeros(shape = (int(a[1]),1))
E0_z = np.zeros(shape = (int(a[2]),1))
B0_x = np.zeros(shape = (int(a[3]),1))
B0_y = np.zeros(shape = (int(a[4]),1))
B0_z = np.zeros(shape = (int(a[5]),1))
M0_x = np.zeros(shape = (int(a[3]),1))
M0_y = np.zeros(shape = (int(a[4]),1))
M0_z = np.zeros(shape = (int(a[5]),1))
E0 = np.array([E0_x, E0_y, E0_z])
H0 = np.array([B0_x, B0_y, B0_z])
M0 = np.array([M0_x, M0_y, M0_z])
H_s = H0

R_sys = Ferro_sys(size,disc,E0,H0,M0,H_s)
R_sys.dt = dt

def f_x(x,y,z,t):
    if t < 0.2:
        val = 0
    if x == 0 or x == max_x:
        val = 0
    else:
        val = 1
    
    return val

def f_y(x,y,z,t):
    
    val = 0
    if y == 0 or y == max_x:
        val = 0
    
    return val

def f_z(x,y,z,t):
    val = 0
    
    if z == 0 or z == max_x:
        val = 0
    
    return val

R_sys.fx = f_x
R_sys.fy = f_y
R_sys.fz = f_z

for t in np.arange(0,T,dt):
    ### re-initializing the system
    R_sys.set_up()
    
    ### Running the system
    R_sys.single_run(t)
    
    ## Updating old fields
    R_sys.E_old2 = R_sys.E_old.values
    R_sys.B_old2 = R_sys.B_old.values
    R_sys.M_old2 = R_sys.M_old.values
    R_sys.H_old2 = R_sys.H_old.values
    
    R_sys.E_old = R_sys.E_new.values
    R_sys.H_old = R_sys.H_new.values
    R_sys.M_old = R_sys.M_new.values
    R_sys.B_old = R_sys.B_new.values
    
    print('Current time: ', round(t,1))

## Plotting stuff

fig_Mx = R_sys.plot_slice('M','x',110)
fig_My = R_sys.plot_slice('M','y',100)
fig_Mz = R_sys.plot_slice('M','z',100)

fig_Mx.save_fig('Mx_110')
fig_Mx.save_fig('My_100')
fig_Mx.save_fig('My_100')




